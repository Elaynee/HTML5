{
    fileTypes = (html, htm, shtml, xhtml, rhtml); 
    firstLineMatch = "<!DOCTYPE|<(?i:html)";
    /* */
    foldingStartMarker = "(<(?i:(head|table|tr|div|style|script|ul|ol|form|dl))\\b.*?>|\\{\\{?(if|foreach|capture|literal|foreach|php|section|strip)|\\{\\s*$)";
    foldingStopMarker = "(</(?i:(head|table|tr|div|style|script|ul|ol|form|dl))>|\\{\\{?/(if|foreach|capture|literal|foreach|php|section|strip)|(^|\\s)\\})";
    /* */
    keyEquivalent = "^~H"; 
    name = "HTML (Basic)"; 
    scopeName = "text.html.basic";
    patterns = (
        {   name = "declaration.xml-processing.html"; 
            begin = "<\\?(xml)"; end = "\\?>"; 
            captures = {
                1 = { name = "entity.name.tag.xml.html"; };
            };
            patterns = (
                {   name = "entity.other.attribute-name.html";
                    match = " ([a-zA-Z-:]+)";
                }, 
                {   name = "string.quoted.double.html"; 
                    begin = "\""; end = "\""; 
                    patterns = (
                        {   name = "constant.character.entity.html"; 
                            match = "&([a-zA-Z]+|#[0-9]+|#x[0-9a-fA-F]+);"; 
                        }, 
                        {   name = "invalid.illegal.bad-ampersand.html"; 
                            match = "&"; 
                        }
                    ); 
                }, 
                {   name = "string.quoted.single.html"; 
                    begin = "'"; end = "'"; 
                    patterns = (
                        {   name = "constant.character.entity.html"; 
                            match = "&([a-zA-Z]+|#[0-9]+|#x[0-9a-fA-F]+);"; 
                        }, 
                        {   name = "invalid.illegal.bad-ampersand.html"; 
                            match = "&"; 
                        }
                    ); 
                }
            );
        }, 
        {   name = "declaration.sgml.html"; 
            begin = "<!"; end = ">"; 
            patterns = (
                {   name = "invalid.illegal.bad-comments-or-CDATA.html"; 
                    match = "(\\s*)(?!--|>)\\S(\\s*)"; 
                }, 
                {   name = "comment.block.html"; 
                    begin = "--"; end = "--"; 
                    patterns = (
                        {   name = "other.preprocessor.server-side-includes.html"; 
                            begin = "^#\\s*(include|config|echo|exec|fsize|flastmod|printenv|set)"; 
                            end = "(?=\\s*--|>)"; 
                        }, 
                    ); 
                }, 
                {   name = "declaration.doctype.html"; 
                    begin = "(DOCTYPE)"; end = "(?=>)"; 
                    captures = {
                        1 = { name = "entity.name.tag.doctype.html"; };
                    };
                    patterns = (
                        {   name = "string.quoted.double.doctype.identifiers-and-DTDs.html"; 
                            match = "\"[^\">]*\""; 
                        }
                    ); 
                }, 
                {   name = "constant.other.inline-data.html"; 
                    begin = "\\[CDATA\\["; end = "]](?=>)"; 
                }
            ); 
        },
        {   name = "source.ruby.embedded.html"; 
            begin = "<%"; end = "%>"; 
            patterns = ({include = "source.ruby"; }); 
        }, 
        {   name = "source.smarty.embedded.html"; 
            begin = "{{|{";
            end = "}}|}"; 
            patterns = ({include = "source.smarty"; }); 
        }, 
        {   name = "source.php.embedded.html"; 
            begin = "(?:^\\s+)?<\\?(php|=)?"; end = "\\?>(?:\\s*\\n)?"; 
            patterns = ({include = "source.php"; }); 
        }, 
        {   name = "source.css.embedded.html"; 
            begin = "(?:^\\s+)?<((?i:style))\\b(?![^>]*/>)[^>]*>?"; 
            end = "</((?i:style))>(?:\\s*\\n)?"; 
            captures = { 1 = { name = "entity.name.tag.html"; }; };
            patterns = ({include = "source.css"; }); 
        }, 
        {   name = "source.js.embedded.html"; 
            begin = "(?:^\\s+)?<((?i:script))\\b(?![^>]*/>)[^>]*>?"; 
            end = "</((?i:script))>(?:\\s*\n)?"; 
            captures = { 1 = { name = "entity.name.tag.html"; }; };
            patterns = ({include = "source.js"; }); 
        }, 
        {   name = "constant.character.entity.html"; 
            match = "&([a-zA-Z]+|#[0-9]+|#x[0-9a-fA-F]+);"; 
        }, 
        {   name = "declaration.tag.html"; 
            begin = "</?([a-zA-Z0-9:]+)"; end = ">"; 
            captures = { 1 = { name = "entity.name.tag.html"; }; };
            patterns = (
                {   // special handling of id="identifier"
                    name = "declaration.attribute-with-value.id.html";
                    match = " (id)=((\"|')(.*?)\\3)";
                    captures = {
                        1 = { name = "entity.other.attribute-name.id.html"; };
                        2 = { name = "string.quoted.html"; };
                        4 = { name = "dummy.id-value.html"; };
                    };
                }, 
                {   name = "entity.other.attribute-name.html";
                    match = " ([a-zA-Z-:]+)";
                }, 
                {   name = "string.quoted.double.html"; 
                    begin = "\""; end = "\""; 
                    patterns = (
                        {   name = "source.smarty.embedded.xhtml"; 
                            begin = "{{|{";
                            end = "}}|}"; 
                            patterns = ({include = "source.smarty"; }); 
                        }, 
                        {   name = "constant.character.entity.html"; 
                            match = "&([a-zA-Z]+|#[0-9]+|#x[0-9a-fA-F]+);"; 
                        }, 
                        {   name = "invalid.illegal.bad-ampersand.html"; 
                            match = "&"; 
                        }
                    ); 
                }, 
                {   name = "string.quoted.single.html"; 
                    begin = "'"; end = "'"; 
                    patterns = (
                        {   name = "source.smarty.embedded.xhtml"; 
                            begin = "{{|{";
                            end = "}}|}"; 
                            patterns = ({include = "source.smarty"; }); 
                        }, 
                        {   name = "constant.character.entity.html"; 
                            match = "&([a-zA-Z]+|#[0-9]+|#x[0-9a-fA-F]+);"; 
                        }, 
                        {   name = "invalid.illegal.bad-ampersand.html"; 
                            match = "&"; 
                        }
                    ); 
                }
            ); 
        }, 
        {   name = "invalid.illegal.incomplete.html"; 
            match = "<>"; 
        }, 
        {   name = "invalid.illegal.bad-angle-bracket-or-ampersand.html"; 
            match = "<(?=\\W)|>|&"; 
        }
    ); 
    uuid = "17994EC8-6B1D-11D9-AC3A-000D93589AF6"; 
}
